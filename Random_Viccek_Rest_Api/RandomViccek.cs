// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Random_Viccek_Rest_Api;
//
//    var randomViccek = RandomViccek.FromJson(jsonString);

namespace Random_Viccek_Rest_Api
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RandomViccek
    {
        [JsonProperty("error")]
        public bool Error { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("joke")]
        public string Joke { get; set; }

        [JsonProperty("flags")]
        public Flags Flags { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("safe")]
        public bool Safe { get; set; }

        [JsonProperty("lang")]
        public string Lang { get; set; }
    }

    public partial class Flags
    {
        [JsonProperty("nsfw")]
        public bool Nsfw { get; set; }

        [JsonProperty("religious")]
        public bool Religious { get; set; }

        [JsonProperty("political")]
        public bool Political { get; set; }

        [JsonProperty("racist")]
        public bool Racist { get; set; }

        [JsonProperty("sexist")]
        public bool Sexist { get; set; }

        [JsonProperty("explicit")]
        public bool Explicit { get; set; }
    }

    public partial class RandomViccek
    {
        public static RandomViccek FromJson(string json) => JsonConvert.DeserializeObject<RandomViccek>(json, Random_Viccek_Rest_Api.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RandomViccek self) => JsonConvert.SerializeObject(self, Random_Viccek_Rest_Api.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
